#include <iostream>
#include <ctime>
#include <stdlib.h>
#include <list>
#include <algorithm>

using namespace std;

const int n = 100;

int arr[n];

list <int> myList;

list <int>::iterator pointer;

void swap(int &a, int &b)            /*swapping two elements*/
{
	if (&a == &b)
		return ;
	a^=b;
	b^=a;
	a^=b;
	}

void write_array()               /*write array's elements*/
{
	for (int i = 0; i < n; i++)
		cout << arr[i] << " ";
	cout << "\n\n";
	}

void bubble_sort(int arr[], int n)      /*sorting array with bubble sort*/
{   
	for(int i = n - 2; i >= 0; i--)   
    	for(int j = 0; j <= i; j++)  
			if (arr[j] < arr[j+1])
				swap(arr[j], arr[j+1]);
	}

void quickSort_basic(int arr[], int begin, int end)       /*sorting array with quick sort*/
{
      int i = begin, j = end;
      int pivot = arr[begin + (end - begin)/2]; 

      while (i <= j)
      {
            while (arr[i] < pivot)
                  i++;
            while (arr[j] > pivot)
                  j--;
            if (i <= j)
            {
                  swap(arr[i], arr[j]);
                  i++;
                  j--;
            	}
      		}

      if (begin < j)
            quickSort_basic(arr, begin, j);
      if (i < end)
            quickSort_basic(arr, i, end);
    	}

void quickSort()                  /*call function quick sort and reverse gotten array*/
{
	quickSort_basic(arr, 0, 99);
	for (int i = 0; i < n/2; i++)
		swap(arr[i], arr[n - i - 1]);
	}

bool search(int target)             /*return bool is target value in list*/
{
  if (find(myList.begin(), myList.end(), target) != myList.end())
    return true;
  else
      return false;
  }

int search_count(int target)
{
  int count = 0;
  list <int>::iterator pointer;
  pointer = myList.begin();
  bool is = search(target);
  if (is)
    if (*pointer++ == target) 
    {
      count++;
      while (*pointer == target)
      {
        count++;
        pointer++;
        }
      }
    return is;

  }

int linear_search(int target)         /*searching linearly target value in list*/ 
{
  int count = 0;
  for (pointer = myList.begin(); pointer != myList.end(); pointer++)
      if (*pointer == target)
        count++;
  return count;
    }

void write_list()                 /*write list's elements*/
{
  for (pointer = myList.begin(); pointer != myList.end(); pointer++)
      cout << *pointer << " ";
  }

int main()
{ 
	srand(time(NULL));
	for(int i = 0; i < n ; i++)
        arr[i] = rand() % 101;
    quickSort();
    // bubble_sort(arr, n);
    write_array();

  for (int i = 0; i < n; i++)             /*transfer elements from array to list*/
      myList.push_back(arr[i]);             
  write_list();
  cout << "\n\n";
  cout << search_count(59);
    /* int s = 37;
    cout << linear_search(s) << "\n\n";*/
	}
