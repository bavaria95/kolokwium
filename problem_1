#include <iostream>
#include <ctime>
#include <stdlib.h>
#include <list>
#include <algorithm>

using namespace std;

const int n = 100;

int arr[n];

list <int> myList;

list <int>::iterator pointer;

void swap(int &a, int &b)            /*swapping two elements*/
{
	if (&a == &b)
		return ;
	a^=b;
	b^=a;
	a^=b;
	}

void write_array()               /*write array's elements*/
{
	for (int i = 0; i < n; i++)
		cout << arr[i] << " ";
	cout << "\n\n";
	}

void write_list()                 /*write list's elements*/
{
  for (pointer = myList.begin(); pointer != myList.end(); pointer++)
      cout << *pointer << " ";
  cout << "\n\n";
  }

void bubbleSort_basic(int arr[], int n)      /*sorting array with bubble sort algorithm*/
{   
	for(int i = n - 2; i >= 0; i--)   
    	for(int j = 0; j <= i; j++)  
			if (arr[j] < arr[j+1])
				swap(arr[j], arr[j+1]);
	}

void bubbleSort()                         /*call function bubble sort*/
{
  bubbleSort_basic(arr, n);
  for (int i = 0; i < n/2; i++)
    swap(arr[i], arr[n - i - 1]);
  }

void quickSort_basic(int arr[], int begin, int end)       /*sorting array with quick sort algorithm*/
{
      int i = begin, j = end;
      int pivot = arr[begin + (end - begin)/2]; 

      while (i <= j)
      {
            while (arr[i] < pivot)
                  i++;
            while (arr[j] > pivot)
                  j--;
            if (i <= j)
            {
                  swap(arr[i], arr[j]);
                  i++;
                  j--;
            	}
      		}

      if (begin < j)
            quickSort_basic(arr, begin, j);
      if (i < end)
            quickSort_basic(arr, i, end);
    	}

void quickSort()                  /*call function quick sort and reverse gotten array*/
{
	quickSort_basic(arr, 0, 99);
	for (int i = 0; i < n/2; i++)
		swap(arr[i], arr[n - i - 1]);
	}

void selectionSort_basic(int *arr, int n)     /*sorting array with selection sort algorithm*/ 
{
    for (int i = 0; i < n; i++)
    {
        int m = i;
        for (int j = i + 1; j < n; j++)
            if (arr[j] < arr[m])
                m = j;
        swap(arr[i], arr[m]);
      }
    }

void selectionSort()                       /*call function selection sort and reverse gotten array*/
{
  selectionSort_basic(arr, n);
  for (int i = 0; i < n/2; i++)
    swap(arr[i], arr[n - i - 1]);
  }

int search_count(int target)            /*searching target value in list and return number of target's entries*/
{
  int count = 0;
  list <int>::iterator pointer;
  pointer = find(myList.begin(), myList.end(), target);
  if (*pointer == target)
    while (*pointer == target)
    {
      count++;
      pointer++;
      }
  return count;
  }

int linear_search(int target)         /*searching linearly target value in list*/ 
{
  int count = 0;
  for (pointer = myList.begin(); pointer != myList.end(); pointer++)
      if (*pointer == target)
        count++;
  return count;
    }

void transfer()                     /*transfer elements from array to list*/
{
  for (int i = 0; i < n; i++)             
    myList.push_back(arr[i]); 
  }

int main()
{ 
	srand(time(NULL));
	for(int i = 0; i < n ; i++)
      arr[i] = rand() % 101;
  quickSort();                        /*change a quick sort, bubble sort or selection sort*/
  //bubbleSort();       
  //selectionSort();
  write_array();
  transfer();          
  write_list();
	}
